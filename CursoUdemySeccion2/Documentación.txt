Visual Studio: 

https://learn.microsoft.com/es-es/visualstudio/ide/use-solution-explorer?view=vs-2022

Instalar VisualCode para Mac:
https://visualstudio.microsoft.com/es/vs/mac/


//Variables
https://learn.microsoft.com/es-mx/dotnet/csharp/language-reference/builtin-types/value-types#built-in-value-types

//Tipos numericos flotantes
https://learn.microsoft.com/es-mx/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types

//Tipos bool
https://learn.microsoft.com/es-mx/dotnet/csharp/language-reference/builtin-types/bool

//Tipos numericos flotantes
https://learn.microsoft.com/es-mx/dotnet/csharp/language-reference/builtin-types/integral-numeric-types


//Diagramas
https://www.lucidchart.com/pages/?
https://www.drawio.com/


//Ejemplo de programacion estructurada
//1. Algoritmo_lista de pasos a seguir:

INICIO
1. Pedir altura
2. Pedir ancho del rectangulo
3. Calcular area multiplicando alto * ancho
4. Calcular el perimetro
5. Mostrar area
6. Mostrar parametro
FIN



//2. pseudocodigo

INICIO
Variables: 
       area, ancho, altura, perimetro: double

Escribir("Dame la altura: ")
Leer(altura)

Escribir("Dame el ancho: ")
Leer(ancho)

area <-altura * ancho> 

perimetro <- 2(altura+ancho) >

Escribir (" El area es: ", area)
Escribir("El parametro es: ", perimetro)

FIN


//Keyword C#
https://learn.microsoft.com/es-mx/dotnet/csharp/language-reference/keywords/



//Bucle for
El bucle for es más adecuado cuando conoces de antemano el número de iteraciones que necesitas realizar. Se utiliza principalmente cuando hay una variable de control que se inicializa, se evalúa en una condición y se incrementa/decrementa en cada iteración.

//Bucle while
El bucle while se usa cuando no se conoce de antemano cuántas veces se ejecutará el bucle. La condición se evalúa antes de cada iteración, y el bucle continúa ejecutándose mientras la condición sea verdadera. Es útil cuando las iteraciones dependen de una condición que puede cambiar dentro del bucle.

//Diferencias clave entre for y while:
Inicialización y actualización:

En un for, la inicialización, la condición y la actualización de la variable de control están en la misma línea, lo que hace que sea más conciso y fácil de leer para bucles con un número fijo de iteraciones.
En un while, la inicialización y la actualización deben hacerse dentro del cuerpo del bucle o antes y después, respectivamente, lo que puede ser más flexible para condiciones complejas.


El factorial de un número entero positivo 𝑛 ,n (denotado como n!) es el producto de todos los números enteros positivos desde 1 hasta 𝑛
Por ejemplo:
5! = 5 * 4 * 3 * 2 * 1 = 120
4! = 4 * 3 * 2 * 1 = 24
0! = 1


//Factorial Iterativo:

Se utiliza un bucle for para multiplicar todos los números desde 1 hasta n.
Es eficiente y fácil de entender, pero puede ser menos intuitivo para problemas que se prestan naturalmente a una definición recursiva.

//Factorial Recursivo:
La función se llama a sí misma con n-1 hasta que n sea 0.
Es más elegante y más fácil de entender para algunos problemas, pero puede ser menos eficiente debido a la sobrecarga de llamadas recursivas.
